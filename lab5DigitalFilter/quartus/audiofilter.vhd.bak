library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_signed.all;
use ieee.std_logic_textio.all;
use std.textio.all;
-- Signal declarations
signal filterInOneChannel : signed(15 downto 0);
signal filterInResized : signed(35 downto 0);
signal filterSection_1in : signed(35 downto 0);
signal filterOutput : signed(35 downto 0);
-- Grab just one channel from input
filterInOneChannel <= i_audioSample(15 downto 0);
-- Simply resize the 16 bit input to 36 bits. There is an implied
-- divide by 4 involved in this, since we are going from 15 bits to
-- 17 bits after the implied decimal point. This will be canceled by
-- the multiply by 4 on the output.
filterInResized <= resize(filterInOneChannel, filterInResized'length);
-- Implement the divide by 16 which is multiplier s(1)
filterSection_1in <= shift_right(filterInResized, 4);
-- Grab the lowest 16 bits of your filter output and place them
-- into the output port. There is an implied multiply by 4 here
-- due to going from 15 bits to 17 bits after the decimal. This cancels
-- the previous divide by 4.
o_audioSampleFiltered <= filterOutput(15 downto 0) & filterOutput(15 downto 0);



entity audio_filter is
port (
i_clk_50 : in std_logic;
i_reset : in std_logic;
i_audioSample : in signed(31 downto 0);
i_dataReq : in std_logic;
o_audioSampleFiltered : out signed(31 downto 0)
);
end entity;